-- Debugging function to help track execution
local function debugPrint(message)
    print("[DEBUG] " .. message)
end

-- Create GUI elements
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

debugPrint("Player and PlayerGui loaded.")

-- Create the GUI screen
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = playerGui
debugPrint("ScreenGui created.")

-- Create the main button (square)
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 100, 0, 100)  -- Set size to be square (100x100 pixels)
button.Position = UDim2.new(0, 10, 1, -110)  -- Position at bottom-left corner, 10 pixels from the left and 110 pixels from the bottom
button.Text = "PH"  -- Button text is now just "PH"
button.TextSize = 24
button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)  -- Green color for the button
button.Parent = screenGui
debugPrint("Main button created.")

-- Create the menu frame (initially hidden)
local menuFrame = Instance.new("Frame")
menuFrame.Size = UDim2.new(0, 300, 0, 400)
menuFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
menuFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0)  -- Green background for the menu
menuFrame.BackgroundTransparency = 0.5
menuFrame.Visible = false
menuFrame.Parent = screenGui
debugPrint("Menu frame created (hidden).")

-- Create the scrolling frame inside the menu
local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
scrollingFrame.ScrollBarThickness = 10
scrollingFrame.Parent = menuFrame
debugPrint("Scrolling frame created.")

-- Function to create buttons inside the scrolling frame
local function createButton(index, buttonText, onClickFunction)
    debugPrint("Creating button #" .. index)
    local newButton = Instance.new("TextButton")
    newButton.Size = UDim2.new(1, -20, 0, 50)
    newButton.Position = UDim2.new(0, 10, 0, (index - 1) * 60)  -- Spacing between buttons
    newButton.Text = buttonText
    newButton.TextSize = 20
    newButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)  -- Green color for the buttons
    newButton.Parent = scrollingFrame
    newButton.MouseButton1Click:Connect(onClickFunction)
end

-- Sprint functionality
local isSprinting = false
local normalWalkSpeed = player.Character and player.Character:FindFirstChildOfClass("Humanoid") and player.Character.Humanoid.WalkSpeed or 16
local sprintSpeed = 50  -- Speed when sprinting
local slowWalkSpeed = 2  -- Speed when walking slowly

local function toggleSprint()
    debugPrint("Sprint button clicked.")
    if not isSprinting then
        -- Start sprinting
        debugPrint("Starting sprint.")
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.WalkSpeed = sprintSpeed
        end
    else
        -- Stop sprinting (reset speed)
        debugPrint("Stopping sprint.")
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.WalkSpeed = normalWalkSpeed
        end
    end
    isSprinting = not isSprinting  -- Toggle the sprinting state
end

-- Slow Walk functionality
local isSlowWalking = false

local function toggleSlowWalk()
    debugPrint("Slow Walk button clicked.")
    if not isSlowWalking then
        -- Start slow walking
        debugPrint("Starting slow walk.")
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.WalkSpeed = slowWalkSpeed
        end
    else
        -- Stop slow walking (reset speed)
        debugPrint("Stopping slow walk.")
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.WalkSpeed = normalWalkSpeed
        end
    end
    isSlowWalking = not isSlowWalking  -- Toggle the slow walking state
end

-- Hover functionality (renamed Flight to Hover)
local isHovering = false

local function toggleHover()
    debugPrint("Hover button clicked.")
    if not isHovering then
        -- Enable hover
        debugPrint("Enabling hover.")
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = true  -- Disable the humanoid's collision for hover
            player.Character.HumanoidRootPart.Anchored = true  -- Anchor the character
        end
    else
        -- Disable hover
        debugPrint("Disabling hover.")
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false  -- Re-enable collision
            player.Character.HumanoidRootPart.Anchored = false  -- Unanchor the character
        end
    end
    isHovering = not isHovering  -- Toggle the hovering state
end

-- Flight functionality (new)
local isFlying = false
local platform

local function toggleFlight()
    debugPrint("Flight button clicked.")
    if not isFlying then
        -- Create a platform under the user
        debugPrint("Creating flight platform.")
        platform = Instance.new("Part")
        platform.Size = Vector3.new(10, 1, 10)  -- Platform size
        platform.Position = player.Character.HumanoidRootPart.Position - Vector3.new(0, 5, 0)  -- Place below the character
        platform.Anchored = true
        platform.CanCollide = true
        platform.BrickColor = BrickColor.Green()  -- Set color to green
        platform.Parent = workspace

        -- Make the platform move upward when the player jumps
        local connection
        connection = player.Character.Humanoid.Jumping:Connect(function()
            if platform then
                platform.Position = platform.Position + Vector3.new(0, 5, 0)  -- Move the platform up
            end
        end)

        -- Disconnect the connection when flight is toggled off
        platform.Destroying:Connect(function()
            connection:Disconnect()
        end)
    else
        -- Remove the platform
        debugPrint("Removing flight platform.")
        if platform then
            platform:Destroy()
        end
    end
    isFlying = not isFlying  -- Toggle the flying state
end

-- Toggle the menu visibility when the main button is clicked
button.MouseButton1Click:Connect(function()
    debugPrint("Main button clicked.")
    menuFrame.Visible = not menuFrame.Visible

    -- Create buttons in the scrolling menu when it's opened
    if menuFrame.Visible then
        -- Clear any existing buttons
        debugPrint("Clearing existing buttons.")
        for _, child in pairs(scrollingFrame:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end

        -- Create the "Sprint" button
        createButton(1, "Sprint", toggleSprint)

        -- Create the "Slow Walk" button
        createButton(2, "Slow Walk", toggleSlowWalk)

        -- Create the "Hover" button (renamed Flight)
        createButton(3, "Hover", toggleHover)

        -- Create the "Flight" button (new)
        createButton(4, "Flight", toggleFlight)
    end
end)

debugPrint("Script execution completed.")
